/**
 * This is not a production server yet!
 * This is only a minimal backend to get started.
 */

import * as express from 'express';
import * as cors from 'cors';
import * as multer from 'multer';
import * as swaggerUi from 'swagger-ui-express';
import { postsApi } from '@ts-rest/example-microservice/util-posts-api';
import { createExpressEndpoints, initServer } from '@ts-rest/express';
import { userAdapter } from './app/userAdapter';
import { generateOpenApi, getZodSchema } from '@ts-rest/open-api';
import { writeFileSync } from 'fs';
import * as yaml from 'js-yaml';
import { z } from 'zod';
import { initContract } from '@ts-rest/core';
import { extendZodWithOpenApi } from '@anatine/zod-openapi';

const upload = multer();
const s = initServer();

extendZodWithOpenApi(z, true);

const schema = z
  .object({
    one: z.string().openapi({ example: 'oneOne' }),
    two: z.number(),
  })
  .openapi({ example: { one: 'oneOne', two: 42 } });

export const Problem = z.object({
  type: z.string(),
  status: z.number(),
  title: z.string(),
  correlationId: z.string().nullish(),
  detail: z.string(),
  errors: z.array(
    z.object({
      code: z.string(),
      detail: z.string(),
    }),
  ),
  toString: z.function(),
});

const c = initContract();

const contract = c.router(
  {
    pushSignal: {
      summary: 'Push Signal',
      description: 'Insert a signal',
      metadata: {
        auth: true,
        role: 'user',
      } as const,
      method: 'POST',
      path: '/push-signal',
      responses: {
        200: Problem,
        400: z.object({
          id: z.string().uuid().openapi({
            title: 'test',
            description: 'A UUID generated by the server',
          }),
          name: z.string(),
          phoneNumber: z.string().min(10).openapi({
            description: 'US phone numbers only',
            example: '555-555-5555',
          }),
        }),
        401: z.object({
          id: z.string().uuid().openapi({
            title: 'test',
            description: 'A UUID generated by the server',
          }),
          name: z.string(),
          phoneNumber: z.string().min(10).openapi({
            description: 'US phone numbers only',
            example: '555-555-5555',
          }),
        }),
        403: Problem,
        500: Problem,
      },
      body: Problem,
    },
  },
  {
    baseHeaders: z.object({
      authorization: z.string(),
    }),
  },
);

const app = express();

app.use(cors());

export const openApiDocument = generateOpenApi(contract, {
  info: {
    title: 'Pull signal Service API',
    version: '1.0',
  },
});

writeFileSync(
  `pull-signals_${openApiDocument.info.version}_.yaml`,
  yaml.dump(openApiDocument),
);

// const openApiSchema = generateOpenApi(
//   postsApi,
//   {
//     info: {
//       title: 'Posts API',
//       version: '1.0.0',
//     },
//   },
//   {
//     jsonQuery: true,
//   },
// );

// app.use('/api', swaggerUi.serve, swaggerUi.setup(openApiSchema));

// app.get('/api.json', (req, res) => {
//   res.json(openApiSchema);
// });

getZodSchema();

const port = process.env.port || 5003;
const server = app.listen(port, () => {
  console.log(`Listening at http://localhost:${port}`);
});
server.on('error', console.error);
